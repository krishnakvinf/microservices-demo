plugins {
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'idea'
    id 'application'
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'com.google.protobuf' version '0.8.14'
}

repositories {
    mavenCentral()
    mavenLocal()
}

description = 'Ad Springboot Service'
group = "adspringbootservice"
version = "0.1.0-SNAPSHOT"

def grpcVersion = "1.42.0"
def jacksonCoreVersion = "2.16.0"
def jacksonDatabindVersion = "2.16.0"
def protocVersion = "3.25.1"

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_19
    targetCompatibility = JavaVersion.VERSION_19
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        implementation 'org.springframework.boot:spring-boot-starter',
                'io.grpc:grpc-netty:1.50.2',
                'io.grpc:grpc-protobuf:1.50.1',
                'io.grpc:grpc-stub:1.50.1',
                'net.devh:grpc-server-spring-boot-starter:2.13.1.RELEASE',
                "com.google.api.grpc:proto-google-common-protos:2.29.0",
                "javax.annotation:javax.annotation-api:1.3.2",
                "org.apache.logging.log4j:log4j-core:2.22.0"
        runtimeOnly "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}",
                "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}",
                "io.netty:netty-tcnative-boringssl-static:2.0.62.Final"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.10.1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.25.0"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

googleJavaFormat {
    toolVersion '1.18.1'
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'hipstershop'
            srcDirs 'build/generated/source/proto/main/java/hipstershop'
            srcDirs 'build/generated/source/proto/main/grpc/hipstershop'
        }
    }
}

startScripts.enabled = false

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
task downloadRepos(type: Copy) {
    from configurations.compileClasspath
    into offlineCompile
    from configurations.compileClasspath
    into offlineCompile
}

task adSpringbootServiceImpl(type: CreateStartScripts) {
    mainClass.set('hipstershop.AdSpringbootServiceImpl')
    applicationName = 'AdSpringbootServiceImpl'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
    defaultJvmOpts =
             ["-agentpath:/opt/cprof/profiler_java_agent.so=-cprof_service=adspringbootserviceimpl,-cprof_service_version=1.0.0"]
}

task adSpringbootServiceClient(type: CreateStartScripts) {
    mainClass.set('hipstershop.AdSpringbootServiceClient')
    applicationName = 'AdSpringbootServiceClient'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
    defaultJvmOpts =
             ["-agentpath:/opt/cprof/profiler_java_agent.so=-cprof_service=adspringbootserviceclient,-cprof_service_version=1.0.0"]
}

applicationDistribution.into('bin') {
    from(adSpringbootServiceImpl)
    from(adSpringbootServiceClient)
    fileMode = 0755
}